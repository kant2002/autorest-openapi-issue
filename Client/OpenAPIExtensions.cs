// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Openapi
{
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for OpenAPI.
    /// </summary>
    public static partial class OpenAPIExtensions
    {
            /// <summary>
            /// Register new patient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='isvalid2'>
            /// </param>
            /// <param name='address1'>
            /// Patient's address - 1st line (Max length: 100)
            /// </param>
            /// <param name='address2'>
            /// Patient's address - 2nd line (Max length: 100)
            /// </param>
            /// <param name='city'>
            /// Patient's city (Max length: 30)
            /// </param>
            /// <param name='departmentid'>
            /// </param>
            /// <param name='isvalid'>
            /// </param>
            public static string CreatePatient(this IOpenAPI operations, int code, bool isvalid2, string address1 = default(string), string address2 = default(string), string city = default(string), int? departmentid = default(int?), bool? isvalid = default(bool?))
            {
                return operations.CreatePatientAsync(code, isvalid2, address1, address2, city, departmentid, isvalid).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Register new patient
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='code'>
            /// </param>
            /// <param name='isvalid2'>
            /// </param>
            /// <param name='address1'>
            /// Patient's address - 1st line (Max length: 100)
            /// </param>
            /// <param name='address2'>
            /// Patient's address - 2nd line (Max length: 100)
            /// </param>
            /// <param name='city'>
            /// Patient's city (Max length: 30)
            /// </param>
            /// <param name='departmentid'>
            /// </param>
            /// <param name='isvalid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<string> CreatePatientAsync(this IOpenAPI operations, int code, bool isvalid2, string address1 = default(string), string address2 = default(string), string city = default(string), int? departmentid = default(int?), bool? isvalid = default(bool?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreatePatientWithHttpMessagesAsync(code, isvalid2, address1, address2, city, departmentid, isvalid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
